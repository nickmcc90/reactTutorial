<Timestamp: 8:52.>


--Why React?--
1. The way that it uses its virtual DOM is more efficient than vanilla JS.
2. Reusable and clearer web components.
3. It's maintained by facebook, so people are constantly looking after it.
4. React is very hirable.

React is a large framework, and you may not want to use it and download all its
libraries if you are doing a small project.

--ReactDOM & JSX--
JSX is a javascript rendition of HTML. We need to import React from "react" because this
enables JSX to be usable.

** One way to set up React in a project is to have 3 script tags in the header (they 
are in the index.html, so we can just copy these) 

    <script crossorigin src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>

and a type='text/babel' in the script
tag that is in the body that has src='index.js'. Then we go into the index.js and do
the:
ReactDOM.render(<h1>hello world</h1>, document.getElementById("root")); 
of course having a div in our index.html with the id of root.

**^^^ The above way is the easy way to put react in, not the correct way.

Here is the long way to create an element and have it go to the html page using JS:

const h1 = document.createElement("h1")
h1.textContent = "This is an imperative way to program"    // this is used rather than .innerHTML
h1.className = "header"
document.getElementById("root").append(h1)

These lines of code are what we would write if we didn't have react. React allows us to
write these same four lines of code by using JSX like in line 21. Or like this: 

ReactDOM.render(<h1 className="header">Hello, React!</h1>, document.getElementById("root"));

Remember, we must wrap all JSX that is going into the ReactDOM line into one element. This could
just be wrapping everything into one neat div.

***Correct way is to just type the command found in the other tutorial into the terminal...
Type this into the terminal:
  npm create vite@latest 'project-name' -- --template react
This command created this folder, and a few files to start with. We have TailwindCSS in this.




----ACTUAL TUTORIAL NOTES, FROM SOFTWARE SATURDAYS------

--Lesson 3: Intermediate. JSX and ReactJS---
JSX is HTML that can be placed in javascript.
JSX syntax lets you create HTML stuff into javascript variables.

To write JSX, just write some HTML and store it into a variable.

const basicJSX = <p>hi</p>

We deploy the JSX into the App.js in the return area like this:
<div>{basicJSX}</div>

To combine JS and HTML in JSX:
let name = "john smith";
const jsExample = <p>Hello {name}!</p>;

Any JS can be put within the curly brackets. Even logic.
Ternary operators are good too.


You can use most HTML attributes in JSX, but the syntax
is a lil diffy.
const classMake = <p className='diffy'>Hmmm</p>;      // this is the only one that's different.
const idMake = <p id='diffy2'>Hmmmmmm</p>;

Styling can be added to JSX as well, same way as we would for normal HTML.
Make sure to put the file into the src folder and have an import statement
in the index.js top line.
'./index.css';


We can make custom JSX.
If we have a group of tags we want to use over and over, we can
make a custom HTML tag with JSX.
This allows us to reuse JSX and HTML tags. (This is called a component basically)

It's good practice to have these custom tags in different files,
but you can group them in the same file.

**Look at component.js for details.

<46:22, we boutta make our own component 2/27>

**For some reason, I can't get the component code to be in a tag. Only a function call. Weird.


--Lesson 4: More ReactJS--

I downloaded the entire 2023-Spring-ReactJS folder. They made the repository with each
branch being a different lesson, and when you want to see certain lessons you checkout
that lesson. SO SICK.

<13:52 Timestamp>

ReactJS is a front-end JS framework, and it's purpose is so that when you make something,
it doesn't have to all be JS where you are linking elements to javascript all the time.

The main file (usually index.js) needs a ReactDOM.render() to work, which tells React to render
components.

All react components need a return function.

By convention, all the code you want goes inside App.js, which could all be calls to components.
Code goes into the component files too. We never modify index.js.
Also, all custom components go in a component folder.

It is possible to you ReactJS without JSX, but it is very unpopular.
The code for the React component can modify the web page depending on
the props given to it.

PROPS 
Props are a way to pass data from a parent component to a child component.
Props can only be changed by the parent component.
Props can be accessed from the parameters of the function component (child).
We pass in props with the same syntax as html attributes. Ex: style='yes'.

**
make sure there is a node modules folder in the project. To do this, do 
  npm i 
instead of npm start to get the folder (i think. for this I just copied a folder I already had).
**

BACK TO PROPS
We can access props from function components by saying props.'whatever'
'whatever' is whatever the parent function assigns a value to in the App.js.
Let's show an example.

APP.JS (Let's say we have a component called Purdue)
<Purdue year={2024} />

PURDUE.JS
export function Purdue() {
  props.year      <----- This is how we access the prop passed from the parent (App.js)
}

<Timestamp: 30:32>

For this example, go to checkpoint4 I learned that we can make two components, then put them
inside another component. Then put that final component into App.js.

Like a header and info tag into a card tag, and then the card tag put into the app.js. Anything that can be repeated should
be its own component such that it can be reused again and again.


REACTJS HOOKS
This replaces the old class based component methodology.
Hooks give us a way to "hook" into the state and lifecycle of a component.

Our first hook: useState()
Sets the state and creates a function to update the state for a variable.
When the state of the variable is updated using its set function, that change
is reflected anywhere the variable is referenced.

>>import { useState } from "react";
>>const [var, setVar] = useState(initialValue);

Another hook: useEffect()
As a teaser trailer to what this hook does, it allows whatever's inside it to only run once
when the webpage is rendered.

<timestamp: 55:03 We are going to explain how the button shows "hide" and "show" with the toggling
and the states. Then we can continue with the video.>

We use setState() to initially set the value of showDemo1 to false. Then, we have an arrow function
that we call when we click the button to change the value of showDemo1. It uses the setShowDemo1 to
the opposite of what it is, which now will be true. When the value is true, the button will say
"hide" because the contents will be displayed. 
The button controls the value of showDemo1, so we can have an JSX element that is underneath the
button that only appears when the button is toggled. We do this by having a ternary operation in 
the JSX element. If the button makes the value true, we display the components. If it is not true,
we make the contents null, which makes them disappear.
The button and the JSX are encapsulated in a overarching div called with an id of 'demo1'.

Back to the video:
In some practice, I passed a prop to a component.
We passed in a timestamp to the info component from the card component.

To add user interactivity to a button, we add the onClick attribute. I wonder if there's a way
to .addEventListener in a component that takes a class from the button we want.

Here is an example of an onclick with the use of useState():

REMEMBER, THE SETTER VARIABLE GETS CHANGED WITH (), NOT EQUALS SIGN!!!!

const [count, setCount] = useState(0);

const clicked = () => {
  setCount(count + 1)
}

<button onClick={ clicked }>{ count }</button>


Our next task is to do what he said before 1:20:42, which is:
{
Populate the header and info to make the card full. Put an update
button to update the timestamp in the card.
}

For some reason my update button isn't working in the function.
Figure out why next time.


---Lesson 5: APIs and ReactJS---
<Timestamp: 11:30>

Our next hook: useEffect()
It does something right after a component has loaded and when one of
the specified dependencies is modified.
>> import { useEffect } from 'react'
>> useEffect(effectFunction, dependencies)
Basically everytime a value in dependencies changes, useEffect is triggered and
will run the effectFunction.

**By the way, anyonomous functions are functions without names that we use
inline. We know this already, such as:
array.forEach((value, index) => {
 blah blah blah
})

useEffect will run everytime a component loads or unloads
It seems like it runs the code inside useEffect when something is loaded,
and runs the return statement when something is unloaded.

<timestamp: 21:46>

LISTS AND MAPS
The JS map() function creates an array by running a function
on another array.

let mapOutput = someArray.map((element) => element * 2);

We can use the map() function to create a list of JSX elements to display.
This means we can create an indefinite number of elements in components if
we need something like that.

This comes in handy in Demo2 (check there, but here is a synopsis.)
We expect a prop named numbers to be passed in. Since the user can input
any amount for this, we use the map function to make a bullet point for however
many numbers there are. Here it is if you are too lazy:

import React from 'react';

export function Demo12() {
  const thisList = props.numbers.map((number) => <li>{ number  }</li>);

  const returner = <ul>{ thisList }</ul>;

  return returner;
}

Checkpoint1 in folder checkpoint5: use the map function to map each pokemon to a card.
P easy.

APIs
Its a software intermediary that allows two applications to talk to one another.
Web-based APIs have standardized on using JSON (JS object notation) to send data using
key-value pairs.

REACT AND APIs
Data from an API can be mapped onto React components.
This allows us to create a user interface that will change depending
on the data we receive.

Demo3 shows a good example of an API call. Look there real quick.

Any notes on this are substituted by looking at Demo3 in folder lesson5 and checkpoint2 in
folder checkpoint5.

<1:04:47 about to see how the guy does checkpoint2, it'll be review>

--Lesson 6: Intermediate Javascript--
<timestamp 2:36>

---FUNCTIONAL COMPONENTS---
We can have functions inside the App.js document before putting code inside the function App()
return block. These functions can be called inside the function App() space as we would before,
like <Example />. They are their own tags. We can pass props through to them too.

---IMPORTS AND EXPORTS---
When we say export, we are making a module that can be shipped out.
When we say import, we are pulling modules.

There are two types of exports:
Named exports (0 to infinite per file)
These have to be imported with the same name, you have to put curly brackets around it.
When calling it after importing it, you need to put curly brackets around it too.


Default exports (max 1 per file)
These can be imported with any name. It could be anything, and you don't have to put
curly brackets around it. Whatever you call it in the import has to be consistent 
with the way you call it in the script <sameName />.

function yep() {

}

export default yep;

**Look at lesson3 folder and see if you can figure out that issue with this.
**It works, I just copy and pasted the one that worked.

Now, we are going to make a blog with posts, comments, and avatars components. This will be in 
checkpoint6. Store these three components in a file and use named exports to import them in your
App.js file.
Let's remove the code we don't need: 
We can toss everything out of the public folder except for favicon.ico and index.html. 
We can toss everything out of the src folder except for App.js and index.js.
Go into App.js and remove the imports at the top.
Go into App.js and remove the stuff inside the return statement and replace it with
a react fragment <> </>.
Go into index.js and remove the reportWebVitals and comments. Also remove the unused
imports.
Run hello world in the app return statement to check that it works.
Make a components folder inside src folder and reference those in your App.js.

<timestamp 26:09 start checkpoint>

Lessons:
For our components, we can make a "something.jsx" file with the .jsx ending instead of the
.js ending to preimport the react capabilities.
You have to import pictures in react.
I don't know why react is runtime erroring when I update a state variable in a functional
component.

--ASYNCHRONOUS CODE--
<52:01>
Asynchronous code does not run at the same time as other code.
PROMISES
Promise functions immediately return with the promise to call some
other function when they finish. I think a promise is an
asynchronous function.

USING PROMISES
Call the promise function
Attach success callbacks with .then()
Attach failure callbacks with .catch()

Promise callbacks can be 'chained' using multiple promise functions.. the
fetch() function requires this

ASYNC/AWAIT
We can make async code sync again!
Labeling a function async allows us to use await
and turn other async function calls into sync func calls.
Wrap the 'await' function call in a try-catch to emulate the
catch() from earlier.

A promise returns a value that can be used as a parameter in the
.then and .catch callbacks.
Demo3 in lesson 6 does this well.

Checkpoint2: Somehow update the blog components from Checkpoint1
to pull data from the PokeAPI.
In the App.js file, use a Promise without async/await to get
data and pass it to the components of the blog.

I don't know how to do this. We should figure out how to get item urls.
Component.jsx from checkpoint6 has info that isn't finished, trying to get
a url from another url.




---Lesson 7: NoSQL Databases---

Databases. Amazon has a database of products, youtube has a database of videos.

For many years, Structured Query Langauge was the standard for database programs.
It used a table approach where databases consist of tables with columns representing fields.

However, lots of data doesn't make sense to store in a rigid table. SQL can be slower for web applications
and harder to distribute. So we can use NoSQL.

NoSQL is a very fast database. There is a lot of different ones, but we will use a Firebase Realtime Database.

FIREBASE 
Firebase is a google development system used for prototyping and small applications.

Realtime Database stores things using a JSON structure. Everything must be a key-value pair
or a key-JSON pair. Javascript handles JSON well.

SETTING UP A FIREBASE ACCOUNT
1. Go to https://firebase.com and click "Go to console" in the upper right corner.
2. In the center of the screen, press "create a project" or add project. Give the project
a name and press continue. Deselect "Enable Google Analytics" and press create project.
<timestamp: 5:45>
3. After project creation, on the left, click "build" and go to "realtime database"
4. Click "create database" and then "Next". Select start in "test mode"
and press "enable"
5. On the left, press the setting gear and select project settings.
6. In the "your apps" section, choose a new website.
7. Give your website a nickname and press "Register app".
Select "Use NPM" under "Add Firebase SDK". Copy the code in the
box and paste it somewhere for reference if you don't need it now.

This is pretty much all there is to setting up firebase!

SECURITY
Don't put this on the web while the settings show "test mode"!
Look into firebase rules for permissions after making the app.

-----------------
npm install firebase
-----------------

--------------------
// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyCFXQy_l26cVpfdAdaLFdUvJ6adwRxRHBU",
  authDomain: "pokedexapp-2540c.firebaseapp.com",
  databaseURL: "https://pokedexapp-2540c-default-rtdb.firebaseio.com",
  projectId: "pokedexapp-2540c",
  storageBucket: "pokedexapp-2540c.appspot.com",
  messagingSenderId: "793316458362",
  appId: "1:793316458362:web:585027c696225361f960c3"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
--------------------

It's good to have a database.js file for this firebase data.

import { initializeApp } from "firebase/app";
import { getDatabase } from 'firebase/database';

const app = initializeApp(firebaseConfig);

const database = getDatabase(app);
export { database };

It is important for databases to have CRUD capabilities...
C - create and store data
R - read available data
U - update existing data
D - delete existing data

Proper web apps must follow these rules.

We should..
import { ref } from 'firebase/database';
.. so that we can reference things like this..
const dataRef = ref(database, '/path/to/data');


CREATING DATA IN FIREBASE
After importing the database and creating a reference...
1. Import the set() method from 'firebase/database'
set('the ref', 'data to store that ref') // set takes two parameters

READING DATA IN FIREBASE
1. Import the onValue() method from 'firebase/database'
<timestamp: 13:34>
onValue(reference, callback-function)
onValue will run the callback function every time the ref is updated.

UPDATING DATA IN FIREBASE
update()
Get it from 'firebase/database'
update(reference, data-to-update-the-ref)

DELETING DATA IN FIREBASE
remove()
Get it from 'firebase/database'
remove(ref) //only one parameter

DIFFERENCES IN UPDATING
set() vs update()
set() is destructive and overwrites data
update() merges and has additive properties.

Don't forget to type npm i firebase (i also brings the node modules in too)
<timestamp 20:13>
I looked at the code for CRUD in demo 2, I need to do some messing around with it.
<timestamp 30:25>

snap.val() lets you access data inside of a reference of data at a given point in time.

TIME FOR THE PROJECT!!